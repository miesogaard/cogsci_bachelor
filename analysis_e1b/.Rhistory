word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
print(word_type %>%
filter(w_type != "hi") %>%
group_by(w_type) %>%
summarise(count = n(), ld = count/length(story_elements[[i]]))
)
print()
}
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print( ( length(content_words) / length(story_elements[[i]]) ) * 100)
}
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print( ( length(content_words$words) / length(story_elements[[i]]) ) * 100)
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story", as.character(i)))
print( ( length(content_words$words) / length(story_elements[[i]]) ) * 100)
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story", as.character(i)), ":")
print( ( length(content_words$words) / length(story_elements[[i]]) ) * 100)
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story", as.character(i), ":"))
print( ( length(content_words$words) / length(story_elements[[i]]) ) * 100)
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story", as.character(i), ":", as.character(length(content_words$words) / length(story_elements[[i]]) ) * 100))
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story", as.character(i), ":", as.character((length(content_words$words) / length(story_elements[[i]]) ) * 100)))
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story", as.character(i), ":", as.character(round((length(content_words$words) / length(story_elements[[i]]) ) * 100, 2)))
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story", as.character(i), ":", as.character(round((length(content_words$words) / length(story_elements[[i]]) ) * 100, 2))))
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story",
as.character(i), ":",
as.character(round((length(content_words$words) / length(story_elements[[i]]) ) * 100, 2))))
}
# Lexical Density
stopword_list <- stopwords::stopwords("en", source = "nltk")
function_word <- c()
for (i in 1:5) {
word_type <- tibble(words = "a", w_type = "hi")
for (word in story_elements[[i]]) {
word_new <- gsub("[[:punct:]]", "", word)
word_new <- tolower(word_new)
if (word %in% stopword_list) {
type <- "function"
} else {
type <- "content"
}
word_type <- add_row(word_type, words = word_new, w_type = type)
}
content_words <- word_type %>% filter(w_type == "content")
print(paste("lexical density of story",
as.character(i), ":",
as.character( round(
( length(content_words$words) / length(story_elements[[i]]) ) * 100, 2)
)
)
)
}
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, ggplot2)
#install.packages("stopwords")
setwd("~/Dokumenter/AU/5. Bachelor/analysis_e1a")
files <- list.files(path = "data", pattern = ".csv", full.names = T)
df <- map_dfr(files, read_csv) #loading the data
df
colnames(df)[21] <- 'ID'
colnames(df)[22] <- 'age'
df_q <- select(df,
ID = ID,
age = age,
story = story,
condition = type_condition,
question = questions,
answer = correct,
response_key = question_resp.keys,
correct = question_resp.corr,
rt = question_resp.rt
)
df_q <- na.omit(df_q)
correct_story_1 = c("1", "2", "2", "1")
correct_story_2 = c("4", "3", "4", "4")
correct_story_3 = c("1", "1", "4", "3")
correct_story_4 = c("1", "1", "2", "3")
correct_story_5 = c("4", "3", "2", "4")
answer <- c()
q_type <- c()
for (i in 1:length(df_q$question)) {
if (df_q$question[i] == 'resources/story_1_q_1.png') {
answer[i] <- correct_story_1[1]
q_type[i] <- "local_letter"
} else if (df_q$question[i] == 'resources/story_1_q_2.png') {
answer[i] <- correct_story_1[2]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_1_q_3.png') {
answer[i] <- correct_story_1[3]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_1_q_4.png') {
answer[i] <- correct_story_1[4]
q_type[i] <- "global"
} else if (df_q$question[i] == 'resources/story_2_q_1.png') {
answer[i] <- correct_story_2[1]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_2_q_2.png') {
answer[i] <- correct_story_2[2]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_2_q_3.png') {
answer[i] <- correct_story_2[3]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_2_q_4.png') {
answer[i] <- correct_story_2[4]
q_type[i] <- "global"
} else if (df_q$question[i] == 'resources/story_3_q_1.png') {
answer[i] <- correct_story_3[1]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_3_q_2.png') {
answer[i] <- correct_story_3[2]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_3_q_3.png') {
answer[i] <- correct_story_3[3]
q_type[i] <- "global"
} else if (df_q$question[i] == 'resources/story_3_q_4.png') {
answer[i] <- correct_story_3[4]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_4_q_1.png') {
answer[i] <- correct_story_4[1]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_4_q_2.png') {
answer[i] <- correct_story_4[2]
q_type[i] <- "global"
} else if (df_q$question[i] == 'resources/story_4_q_3.png') {
answer[i] <- correct_story_4[3]
q_type[i] <- "local_letter"
} else if (df_q$question[i] == 'resources/story_4_q_4.png') {
answer[i] <- correct_story_4[4]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_5_q_1.png') {
answer[i] <- correct_story_5[1]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_5_q_2.png') {
answer[i] <- correct_story_5[2]
q_type[i] <- "local"
} else if (df_q$question[i] == 'resources/story_5_q_3.png') {
answer[i] <- correct_story_5[3]
q_type[i] <- "global"
} else if (df_q$question[i] == 'resources/story_5_q_4.png') {
answer[i] <- correct_story_5[4]
q_type[i] <- "local"
}
}
df_q$answer_new <- answer
df_q$q_type <- q_type
for (i in 1:length(df_q$answer_new)) {
if (df_q$response_key[i] == df_q$answer_new[i]) {
df_q$correct[i] <- 1
} else {
df_q$correct[i] <- 0
}
}
df_q$correct <- as.factor(df_q$correct)
df_q %>%
group_by(ID, correct) %>%
summarise(count = n())
ggplot(df_q, aes(x = correct, fill = correct)) +
geom_bar() +
facet_wrap(~question)
test_df <- df_q %>%
filter(correct == 1) %>%
group_by(question, q_type) %>%
summarise(count = n(), mean_rt = mean(rt), sd_rt = sd(rt))
test_df[order(test_df$count), ]
test_df[order(-test_df$mean_rt), ]
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, ggplot2)
#install.packages("stopwords")
setwd("~/Dokumenter/AU/5. Bachelor/analysis_e1a")
files <- list.files(path = "data", pattern = ".csv", full.names = T)
df <- map_dfr(files, read_csv) #loading the data
df
colnames(df)[21] <- 'ID'
colnames(df)[22] <- 'age'
df_q <- select(df,
ID = ID,
age = age,
story = story,
condition = type_condition,
question = questions,
answer = correct,
response_key = question_resp.keys,
correct = question_resp.corr,
rt = question_resp.rt
)
df_q <- na.omit(df_q)
correct_story_1 = c("1", "2", "2", "1")
correct_story_2 = c("4", "3", "4", "4")
correct_story_3 = c("1", "1", "4", "3")
correct_story_4 = c("1", "1", "2", "3")
correct_story_5 = c("4", "3", "2", "4")
answer <- c()
q_type <- c()
for (i in 1:length(df_q$question)) {
if (df_q$question[i] == 'resources/story_1_q_1.png') {
answer[i] <- correct_story_1[1]
q_type[i] <- "local_letter"
df_q$question[i] <- "story_1_q_1"
} else if (df_q$question[i] == 'resources/story_1_q_2.png') {
answer[i] <- correct_story_1[2]
q_type[i] <- "local"
df_q$question[i] <- "story_1_q_2"
} else if (df_q$question[i] == 'resources/story_1_q_3.png') {
answer[i] <- correct_story_1[3]
q_type[i] <- "local"
df_q$question[i] <- "story_1_q_3"
} else if (df_q$question[i] == 'resources/story_1_q_4.png') {
answer[i] <- correct_story_1[4]
q_type[i] <- "global"
df_q$question[i] <- "story_1_q_4"
} else if (df_q$question[i] == 'resources/story_2_q_1.png') {
answer[i] <- correct_story_2[1]
q_type[i] <- "local"
df_q$question[i] <- "story_2_q_1"
} else if (df_q$question[i] == 'resources/story_2_q_2.png') {
answer[i] <- correct_story_2[2]
q_type[i] <- "local"
df_q$question[i] <- "story_2_q_2"
} else if (df_q$question[i] == 'resources/story_2_q_3.png') {
answer[i] <- correct_story_2[3]
q_type[i] <- "local"
df_q$question[i] <- "story_2_q_3"
} else if (df_q$question[i] == 'resources/story_2_q_4.png') {
answer[i] <- correct_story_2[4]
q_type[i] <- "global"
df_q$question[i] <- "story_2_q_4"
} else if (df_q$question[i] == 'resources/story_3_q_1.png') {
answer[i] <- correct_story_3[1]
q_type[i] <- "local"
df_q$question[i] <- "story_3_q_1"
} else if (df_q$question[i] == 'resources/story_3_q_2.png') {
answer[i] <- correct_story_3[2]
q_type[i] <- "local"
df_q$question[i] <- "story_3_q_2"
} else if (df_q$question[i] == 'resources/story_3_q_3.png') {
answer[i] <- correct_story_3[3]
q_type[i] <- "global"
df_q$question[i] <- "story_3_q_3"
} else if (df_q$question[i] == 'resources/story_3_q_4.png') {
answer[i] <- correct_story_3[4]
q_type[i] <- "local"
df_q$question[i] <- "story_3_q_4"
} else if (df_q$question[i] == 'resources/story_4_q_1.png') {
answer[i] <- correct_story_4[1]
q_type[i] <- "local"
df_q$question[i] <- "story_4_q_1"
} else if (df_q$question[i] == 'resources/story_4_q_2.png') {
answer[i] <- correct_story_4[2]
q_type[i] <- "global"
df_q$question[i] <- "story_4_q_2"
} else if (df_q$question[i] == 'resources/story_4_q_3.png') {
answer[i] <- correct_story_4[3]
q_type[i] <- "local_letter"
df_q$question[i] <- "story_4_q_3"
} else if (df_q$question[i] == 'resources/story_4_q_4.png') {
answer[i] <- correct_story_4[4]
q_type[i] <- "local"
df_q$question[i] <- "story_4_q_4"
} else if (df_q$question[i] == 'resources/story_5_q_1.png') {
answer[i] <- correct_story_5[1]
q_type[i] <- "local"
df_q$question[i] <- "story_5_q_1"
} else if (df_q$question[i] == 'resources/story_5_q_2.png') {
answer[i] <- correct_story_5[2]
q_type[i] <- "local"
df_q$question[i] <- "story_5_q_2"
} else if (df_q$question[i] == 'resources/story_5_q_3.png') {
answer[i] <- correct_story_5[3]
q_type[i] <- "global"
df_q$question[i] <- "story_5_q_3"
} else if (df_q$question[i] == 'resources/story_5_q_4.png') {
answer[i] <- correct_story_5[4]
q_type[i] <- "local"
df_q$question[i] <- "story_5_q_4"
}
}
df_q$answer_new <- answer
df_q$q_type <- q_type
for (i in 1:length(df_q$answer_new)) {
if (df_q$response_key[i] == df_q$answer_new[i]) {
df_q$correct[i] <- 1
} else {
df_q$correct[i] <- 0
}
}
df_q$correct <- as.factor(df_q$correct)
df_q %>%
group_by(ID, correct) %>%
summarise(count = n())
ggplot(df_q, aes(x = correct, fill = correct)) +
geom_bar() +
facet_wrap(~question)
ggplot(df_q, aes(x = correct, fill = correct)) +
geom_bar() +
facet_wrap(~question) +
ggtitle("Distribution of incorrect and correct answers for each question")
theme_minimal()
ggplot(df_q, aes(x = correct, fill = correct)) +
geom_bar() +
facet_wrap(~question) +
ggtitle("Distribution of incorrect and correct answers for each MCQ")
theme_minimal()
ggplot(df_q, aes(x = correct, fill = correct)) +
geom_bar() +
facet_wrap(~question) +
ggtitle("Distribution of incorrect and correct answers for each MCQ") +
theme_minimal()
question_df <- df_q %>%
filter(correct == 1) %>%
group_by(question, q_type) %>%
summarise(count = n(), mean_rt = mean(rt), sd_rt = sd(rt))
test_df[order(test_df$count), ]
test_df[order(-test_df$mean_rt), ]
ggplot(question_df, aes(x = count, y = mean_rt, color = question)) +
geom_point() +
ggtitle("Number of correct versus mean response time across all participants") +
theme_minimal() +
theme(legend.position = "none")
ggplot(question_df, aes(x = count, y = mean_rt, color = "black")) +
geom_point() +
ggtitle("Number of correct versus mean response time across all participants") +
theme_minimal() +
theme(legend.position = "none")
ggplot(question_df, aes(x = count, y = mean_rt, color = black)) +
geom_point() +
ggtitle("Number of correct versus mean response time across all participants") +
theme_minimal() +
theme(legend.position = "none")
ggplot(question_df, aes(x = count, y = mean_rt)) +
geom_point() +
ggtitle("Number of correct versus mean response time across all participants") +
theme_minimal() +
theme(legend.position = "none")
ggplot(question_df, aes(x = count, y = mean_rt)) +
geom_point() +
ggtitle("Total number of correct and mean response time across all participants") +
theme_minimal() +
theme(legend.position = "none")
df_q %>%
filter(correct == 1) %>%
ggplot(aes(x=condition, y = rt, fill = condition)) +
geom_boxplot()
